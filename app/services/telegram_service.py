import os, asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime
from ..models import UserVisit
from ..services import handle_user_visit_bot_async

load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN').__str__()
bot = Bot(token=TOKEN)
dp = Dispatcher()


async def command_start(message: Message):
    current_datetime = datetime.now()
    user_visit = UserVisit(
        message.chat.id.__str__(), message.chat.first_name.__str__(), message.chat.last_name.__str__(),
        current_datetime, current_datetime, 1, False
    )

    # # Cháº¡y xá»­ lÃ½ DB báº¥t Ä‘á»“ng bá»™ Ä‘Ãºng cÃ¡ch
    result = await handle_user_visit_bot_async(user_visit)

    message_str = f"Hi {user_visit.FirstName}, TÃ´i lÃ  bot há»— trá»£ quáº£n lÃ½ cho báº¡n.\nCáº£m Æ¡n báº¡n Ä‘Ã£ ghÃ© thÄƒm." if result else "Xin lá»—i, cÃ³ lá»—i xáº£y ra khi xá»­ lÃ½ dá»¯ liá»‡u cá»§a báº¡n."
    await message.answer(message_str)


dp.message.register(command_start, Command("start"))


async def run_polling_telegram():
    """Cháº¡y polling trong má»™t task riÃªng biá»‡t"""
    print("ðŸš€ Starting Telegram bot...")
    loop = asyncio.get_running_loop()
    loop.create_task(dp.start_polling(bot))


async def stop_polling_telegram():
    """Dá»«ng polling"""
    print("Stopping Telegram bot...")
    await dp.storage.close()
    await bot.session.close()
    print("ðŸ›‘ Stopped Telegram bot")